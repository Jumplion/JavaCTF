package ctf.agent;

import java.util.*;
import ctf.common.*;


public class txb130030Agent extends Agent 
{
	int xPos, yPos;
	
	//
	int mapSize;
	boolean knowMapSize = false;
	//
	
	Map<String, Integer> map;
	
	public int getMove(AgentEnvironment inEnvironment) 
	{
		// booleans describing direction of goal
		// goal is either enemy flag, or our base
		boolean goalNorth;
		boolean goalSouth;
		boolean goalEast;
		boolean goalWest;

		// make goal the enemy flag or we have the enemy flag so make our goal our base
		int team = !inEnvironment.hasFlag() ? inEnvironment.ENEMY_TEAM : inEnvironment.OUR_TEAM;

		goalNorth = inEnvironment.isBaseNorth( team, false );
		goalSouth = inEnvironment.isBaseSouth( team, false );
		goalEast = inEnvironment.isBaseEast( team, false );
		goalWest = inEnvironment.isBaseWest( team, false );

		// now we have direction booleans for our goal	
		
		// check for immediate obstacles blocking our path		
		boolean obstNorth = inEnvironment.isObstacleNorthImmediate();
		boolean obstSouth = inEnvironment.isObstacleSouthImmediate();
		boolean obstEast = inEnvironment.isObstacleEastImmediate();
		boolean obstWest = inEnvironment.isObstacleWestImmediate();
		
		
		// if the goal is north only, and we're not blocked, move north
		if( goalNorth && ! goalEast && ! goalWest && !obstNorth )
			return AgentAction.MOVE_NORTH;
			
		// if goal both north and east
		if( goalNorth && goalEast ) {
			// pick north or east for move with 50/50 chance
			if( Math.random() < 0.5 && !obstNorth )
				return AgentAction.MOVE_NORTH;
			if( !obstEast )
				return AgentAction.MOVE_EAST;
			if( !obstNorth )
				return AgentAction.MOVE_NORTH;
		}	
			
		// if goal both north and west	
		if( goalNorth && goalWest ) {
			// pick north or west for move with 50/50 chance
			if( Math.random() < 0.5 && !obstNorth )
				return AgentAction.MOVE_NORTH;
			if( !obstWest )	
				return AgentAction.MOVE_WEST;
			if( !obstNorth )
				return AgentAction.MOVE_NORTH;
		}
		
		// if the goal is south only, and we're not blocked, move south
		if( goalSouth && ! goalEast && ! goalWest && !obstSouth )
			return AgentAction.MOVE_SOUTH;
		
		// do same for southeast and southwest as for north versions	
		if( goalSouth && goalEast ) {
			if( Math.random() < 0.5 && !obstSouth )
				return AgentAction.MOVE_SOUTH;
			if( !obstEast )
				return AgentAction.MOVE_EAST;
			if( !obstSouth )
				return AgentAction.MOVE_SOUTH;
		}
				
		if( goalSouth && goalWest && !obstSouth ) {
			if( Math.random() < 0.5 )
				return AgentAction.MOVE_SOUTH;
			if( !obstWest )
				return AgentAction.MOVE_WEST;
			if( !obstSouth )
				return AgentAction.MOVE_SOUTH;
		}
		
		// if the goal is east only, and we're not blocked
		if( goalEast && !obstEast )
			return AgentAction.MOVE_EAST;
		
		// if the goal is west only, and we're not blocked	
		if( goalWest && !obstWest )
			return AgentAction.MOVE_WEST;
		
		// otherwise, make any unblocked move
		if( !obstNorth )
			return AgentAction.MOVE_NORTH;
		else if( !obstSouth )
			return AgentAction.MOVE_SOUTH;
		else if( !obstEast )
			return AgentAction.MOVE_EAST;
		else if( !obstWest ) 
			return AgentAction.MOVE_WEST;
		
		// completely blocked!
		else
			return AgentAction.DO_NOTHING;	
	}
	
	private void AddNodeToMap(int x, int y, int val)
	{
		String key = x + ", " + y;
		map.put(key, val);
	}
	
	private int GetNodeToMap(int x, int y)
	{
		String key = x + ", " + y;
		return map.get(key);
	}
}